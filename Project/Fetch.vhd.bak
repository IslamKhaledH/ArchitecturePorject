library  ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_signed.all;
use ieee.numeric_std.all;
 
entity Fetch is 
port (
	Sel1: in std_logic_vector (1 downto 0);--input from control unit
			
--at reset control unit send zeroes to pcs
	PC11: in std_logic_vector(15 downto 0 ); --
	PC21: in std_logic_vector(15 downto 0 ); --address to jump to from BRANCH
	PC31: in std_logic_vector(15 downto 0 ); --
	PC41: in std_logic_vector(15 downto 0 ); --
	
	counter1: in std_logic_vector(15 downto 0 ); --
	
	Out_instruction1: out std_logic_vector(15 downto 0 );
	CLK1: in std_logic;
	RESET1: in std_logic
);
end entity Fetch;




architecture Fetch_Arch of Fetch is 


component my_nDFF is
Generic ( n : integer := 16);
port( Clk,Rst,enable : in std_logic;
d : in std_logic_vector(n-1 downto 0);
q : out std_logic_vector(n-1 downto 0));
end component;

Component MUX_Fetch is
		
port ( 
Sel: in std_logic_vector (1 downto 0);--input from control unit
			
--at reset control unit send zeroes to pcs
	PC1: in std_logic_vector(15 downto 0 ); --
	PC2: in std_logic_vector(15 downto 0 ); --address to jump to from BRANCH
	PC3: in std_logic_vector(15 downto 0 ); --
	PC4: in std_logic_vector(15 downto 0 ); --
	CLK: in std_logic;
	
	Out_instruction: out std_logic_vector(15 downto 0 );
	Out_PC: out std_logic_vector(15 downto 0 );
	RESET: in std_logic
);
end component;
--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Component PC is
		
port ( 
counter: in std_logic_vector(15 downto 0 ); 
	
	new_counter: out std_logic_vector(15 downto 0 );
	CLK: in std_logic;
	RESET: in std_logic
);
end component;
--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

signal MY_PC_SIGNAL: std_logic_vector(15 downto 0);
signal MY_PC_SIGNAL1: std_logic_vector(15 downto 0);
signal copied_data: std_logic_vector(15 downto 0);

begin 


mux: MUX_Fetch port map (Sel1,PC11,PC21,PC31,PC41,CLK,Out_instruction1,Out_PC,RESET);
 
PC: PC port map (Out_PC,);



end architecture Fetch_Arch;
